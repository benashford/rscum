NOTES

1. GitHub API
  a. "following" other users
  b. "watching" repositories - your own by default, plus others you choose.
2. Fully connected graph of users - stress minimisation. (show plot with constant distance)
3. Similarity metric - Jaccard Distance ** DEFINITION: |AnB| / |AuB|
  a. plain Jaccard distance (show histogram and plot)
  b. variation: Tanimoto
    i. Show histogram - classic normal bell curve
    ii. Show plot - doesn't seem much better, but users who "watch" the most are in the centre.
    iii. (? related to above) k-means doesn't provide much value, as the centre group follows everything.  Pizza-slicing
         more useful.
4. Similarity metric - Dice's Coefficient ** DEFINITION: 2|AnB| / ( |A| + |B| )
  a. histogram - deceptively similar to Jaccard
  b. plot - makes a lot more sense
  c. cluster report - definitely making sense
5. Similarity metric - Overlap Coefficient ** DEFINITION: |AnB| / min( |A|, |B| )
   a. histogram - biased towards closeness, doesn't take difference in cardinality of sets to mean a large distance between
      points
   b. plot - distance from centre is no longer an indication of number of repositories watched, therefore pizza-slicing
      not required, traditional k-means clustering does the job.
   c. cluster report - looks very cohesive
6. Conclusions
  a. "does it work?" - hard to say.
  b. "next steps" - much larger dataset, distributed calculating.
